services:
  client:
    container_name: client
    build:
      context: ./src/client
      dockerfile: dockerfile
    ports:
      - 3001:3000
    env_file:
      - .env

  server:
    container_name: server
    build:
      context: ./src/server
      dockerfile: dockerfile
    ports:
      - 5001:5000
    volumes:
      - ./src/server:/app  # 將本地的 server 資料夾掛載到容器內的 /app
      - ./src/server/database/schema.sql:/docker-entrypoint-initdb.d/schema.sql
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

  redis:
    container_name: redis
    image: redis:alpine
    ports:
      - 7001:6379
    volumes:
      - redis_data:/data
    restart: always
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s

  # PostgreSQL Database
  db:
    container_name: db
    build:
      context: ./src/server/database
      dockerfile: dockerfile
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - pg_data:/var/lib/postgresql/data
      - ./src/server/database/schema.sql:/docker-entrypoint-initdb.d/schema.sql
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s

  # pgAdmin Service
  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4:8
    restart: always
    ports:
      - "8080:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    volumes:
      - pgadmin4-data:/var/lib/pgadmin
    depends_on:
      db:
        condition: service_healthy

volumes:
  pg_data:
  pgadmin4-data:
  redis_data:

networks:
  DBMSFP_network:
    driver: bridge
